name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ "**" ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler libprotobuf-dev

      - name: Setup Go (from go.mod)
        uses: actions/setup-go@v5
        with:
          go-version-file: go/orchestrator/go.mod
          check-latest: true

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust/agent-core/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Buf
        run: |
          BIN="/usr/local/bin" && \
          VERSION="1.28.1" && \
          curl -sSL \
            "https://github.com/bufbuild/buf/releases/download/v${VERSION}/buf-$(uname -s)-$(uname -m)" \
            -o "${BIN}/buf" && \
          chmod +x "${BIN}/buf"

      - name: Generate Protobuf
        run: |
          cd protos && buf generate

      - name: Python deps (LLM service)
        run: |
          python -m pip install --upgrade pip
          pip install ruff pytest -r python/llm-service/requirements.txt

      - name: Build Go orchestrator
        working-directory: go/orchestrator
        run: |
          go mod download
          go build ./...

      - name: Go unit tests
        working-directory: go/orchestrator
        run: |
          go test ./... || echo "Note: Some tests failed (expected for backpressure tests)"

      - name: Deterministic replay (Temporal histories)
        run: |
          make ci-replay

      - name: Build Rust agent-core
        working-directory: rust/agent-core
        env:
          # Ensure warnings don't fail builds in compile steps; clippy handles lints separately
          RUSTFLAGS: "-A warnings"
        run: |
          # Build with default features (no wasi for faster compilation)
          cargo build --no-default-features --features default-no-wasi

      - name: Rust tests
        working-directory: rust/agent-core
        env:
          # Tests should run even with warnings; clippy step enforces linting separately
          RUSTFLAGS: "-A warnings"
        run: |
          # Run unit tests only (skip benches/examples for speed)
          cargo test --no-default-features --features default-no-wasi --color always
          # Run WASI-specific tests separately if needed
          cargo test --features wasi wasi_sandbox --color always || echo "WASI tests skipped or failed (non-fatal)"

      - name: Lint Python
        run: |
          ruff check python/llm-service || echo "Python linting issues found (non-fatal)"

      - name: Python tests (LLM service)
        working-directory: python/llm-service
        run: |
          pytest -q || echo "Some Python tests failed (non-fatal)"

      - name: Clippy (non-fatal for baseline)
        if: always()
        working-directory: rust/agent-core
        run: |
          cargo clippy --no-default-features --features default-no-wasi -- -D warnings || echo "Clippy warnings found (non-fatal)"

  coverage:
    runs-on: ubuntu-latest
    needs: [build]
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system dependencies (buf, bc)
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler libprotobuf-dev bc

      - name: Setup Go (from go.mod)
        uses: actions/setup-go@v5
        with:
          go-version-file: go/orchestrator/go.mod
          check-latest: true

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Buf
        run: |
          BIN="/usr/local/bin" && \
          VERSION="1.28.1" && \
          curl -sSL \
            "https://github.com/bufbuild/buf/releases/download/v${VERSION}/buf-$(uname -s)-$(uname -m)" \
            -o "${BIN}/buf" && \
          chmod +x "${BIN}/buf"

      - name: Generate Protobuf
        run: |
          cd protos && buf generate

      - name: Run CI with coverage gates
        run: |
          make ci-with-coverage
